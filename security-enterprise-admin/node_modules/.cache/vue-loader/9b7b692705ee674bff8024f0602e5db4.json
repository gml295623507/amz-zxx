{"remainingRequest":"/Users/95h/95h-Projects/security-enterprise-2.4.0/security-enterprise-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/95h/95h-Projects/security-enterprise-2.4.0/security-enterprise-admin/src/components/ren-process-start/src/ren-process-start.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/95h/95h-Projects/security-enterprise-2.4.0/security-enterprise-admin/src/components/ren-process-start/src/ren-process-start.vue","mtime":1569313608000},{"path":"/Users/95h/95h-Projects/security-enterprise-2.4.0/security-enterprise-admin/node_modules/cache-loader/dist/cjs.js","mtime":1593769583426},{"path":"/Users/95h/95h-Projects/security-enterprise-2.4.0/security-enterprise-admin/node_modules/babel-loader/lib/index.js","mtime":1593769580300},{"path":"/Users/95h/95h-Projects/security-enterprise-2.4.0/security-enterprise-admin/node_modules/cache-loader/dist/cjs.js","mtime":1593769583426},{"path":"/Users/95h/95h-Projects/security-enterprise-2.4.0/security-enterprise-admin/node_modules/vue-loader/lib/index.js","mtime":1593769583804}],"contextDependencies":[],"result":["//\n//\n//\n//\n\r\nimport qs from 'qs'\r\nexport default {\r\n  name: 'RenProcessStart',\r\n  data () {\r\n    return {\r\n      formUrl: '',\r\n      instanceIdUrl: '',\r\n      formName: null,\r\n      rootObj: null,\r\n      dataForm: {\r\n        processDefinitionKey: ''\r\n      },\r\n      // 回调函数\r\n      callbacks: {\r\n        startProcessSuccessCallback: null,\r\n        startProcessErrorCallback: null,\r\n        formSaveSuccessCallback: null,\r\n        formSaveErrorCallback: null\r\n      }\r\n    }\r\n  },\r\n  components: {\r\n  },\r\n  created () {\r\n    this.$nextTick(() => {\r\n      this.formUrl = this.saveFormUrl\r\n      this.instanceIdUrl = this.updateInstanceIdUrl\r\n      this.formName = this.dataFormName\r\n    })\r\n  },\r\n  props: {\r\n    saveFormUrl: String,\r\n    updateInstanceIdUrl: String,\r\n    dataFormName: String\r\n  },\r\n  watch: {\r\n    saveFormUrl (val) {\r\n      this.formUrl = val\r\n    },\r\n    updateInstanceIdUrl (val) {\r\n      this.instanceIdUrl = val\r\n    },\r\n    dataFormName (val) {\r\n      this.formName = val\r\n    }\r\n  },\r\n  methods: {\r\n    // 启动流程事件\r\n    processStartHandle () {\r\n      if (!this.formUrl) {\r\n        return this.$message.error(this.$t('process.formURLError'))\r\n      }\r\n      if (!this.dataForm.processDefinitionKey) {\r\n        return this.$message.error(this.$t('process.keyError'))\r\n      }\r\n      if (!this.formName) {\r\n        return this.$message.error(this.$t('process.formNameError'))\r\n      }\r\n      this.rootObj.$refs[this.formName].validate((valid) => {\r\n        if (!valid) {\r\n          return false\r\n        }\r\n        this.$http.get(`/act/process/lastestPage`, {\r\n          params: {\r\n            key: this.dataForm.processDefinitionKey\r\n          }\r\n        }).then(({ data: res }) => {\r\n          if (res.code !== 0) {\r\n            return this.$message.error(res.msg)\r\n          }\r\n          if (!res.data.list || res.data.list.length <= 0) {\r\n            return this.$message.error(this.$t('process.notExistError'))\r\n          }\r\n          this.$http['post'](this.formUrl, this.rootObj[this.formName]).then(({ data: res }) => {\r\n            if (res.code !== 0) {\r\n              this.$message.error(res.msg)\r\n              if (this.callbacks.formSaveErrorCallback) {\r\n                this.callbacks.formSaveErrorCallback(res)\r\n              }\r\n            }\r\n            if (this.callbacks.formSaveSuccessCallback) {\r\n              this.callbacks.formSaveSuccessCallback(res)\r\n            }\r\n            if (!res.data.businessKey) {\r\n              return this.$message.error(this.$t('process.businessKeyError'))\r\n              // this.startProcess(this.dataForm.processDefinitionKey, null, this.rootObj[this.formName])\r\n            } else {\r\n              this.startProcess(this.dataForm.processDefinitionKey, res.data.businessKey, this.rootObj[this.formName])\r\n            }\r\n          }).catch(() => {})\r\n        }).catch(() => {})\r\n      })\r\n    },\r\n    // 启动流程\r\n    startProcess (processDefinitionKey, businessKey, formData) {\r\n      var data = {\r\n        processDefinitionKey: processDefinitionKey,\r\n        businessKey: businessKey,\r\n        variables: formData\r\n      }\r\n      this.$http['post']('/act/running/startOfBusinessKey', data).then(({ data: res }) => {\r\n        if (res.code !== 0) {\r\n          if (this.callbacks.startProcessErrorCallback) {\r\n            this.callbacks.startProcessErrorCallback(res.data)\r\n          }\r\n        }\r\n        this.$message({\r\n          message: this.$t('prompt.success'),\r\n          type: 'success',\r\n          duration: 500,\r\n          onClose: () => {\r\n            if (this.callbacks.startProcessSuccessCallback) {\r\n              this.callbacks.startProcessSuccessCallback(res.data)\r\n            }\r\n          }\r\n        })\r\n        if (this.instanceIdUrl) {\r\n          var params = qs.stringify({\r\n            processInstanceId: res.data.processInstanceId,\r\n            processDefinitionKey: processDefinitionKey,\r\n            businessKey: businessKey\r\n          })\r\n          this.$http['post'](this.instanceIdUrl + '?' + params).then(({ data: res }) => {})\r\n        }\r\n      }).catch(() => {})\r\n    }\r\n  }\r\n}\r\n",{"version":3,"sources":["ren-process-start.vue"],"names":[],"mappingsfile":"ren-process-start.vue","sourceRoot":"src/components/ren-process-start/src","sourcesContent":["<template>\r\n  <el-button type=\"primary\" @click=\"processStartHandle()\">{{ $t('process.createInstance') }}</el-button>\r\n</template>\r\n\r\n<script>\r\nimport qs from 'qs'\r\nexport default {\r\n  name: 'RenProcessStart',\r\n  data () {\r\n    return {\r\n      formUrl: '',\r\n      instanceIdUrl: '',\r\n      formName: null,\r\n      rootObj: null,\r\n      dataForm: {\r\n        processDefinitionKey: ''\r\n      },\r\n      // 回调函数\r\n      callbacks: {\r\n        startProcessSuccessCallback: null,\r\n        startProcessErrorCallback: null,\r\n        formSaveSuccessCallback: null,\r\n        formSaveErrorCallback: null\r\n      }\r\n    }\r\n  },\r\n  components: {\r\n  },\r\n  created () {\r\n    this.$nextTick(() => {\r\n      this.formUrl = this.saveFormUrl\r\n      this.instanceIdUrl = this.updateInstanceIdUrl\r\n      this.formName = this.dataFormName\r\n    })\r\n  },\r\n  props: {\r\n    saveFormUrl: String,\r\n    updateInstanceIdUrl: String,\r\n    dataFormName: String\r\n  },\r\n  watch: {\r\n    saveFormUrl (val) {\r\n      this.formUrl = val\r\n    },\r\n    updateInstanceIdUrl (val) {\r\n      this.instanceIdUrl = val\r\n    },\r\n    dataFormName (val) {\r\n      this.formName = val\r\n    }\r\n  },\r\n  methods: {\r\n    // 启动流程事件\r\n    processStartHandle () {\r\n      if (!this.formUrl) {\r\n        return this.$message.error(this.$t('process.formURLError'))\r\n      }\r\n      if (!this.dataForm.processDefinitionKey) {\r\n        return this.$message.error(this.$t('process.keyError'))\r\n      }\r\n      if (!this.formName) {\r\n        return this.$message.error(this.$t('process.formNameError'))\r\n      }\r\n      this.rootObj.$refs[this.formName].validate((valid) => {\r\n        if (!valid) {\r\n          return false\r\n        }\r\n        this.$http.get(`/act/process/lastestPage`, {\r\n          params: {\r\n            key: this.dataForm.processDefinitionKey\r\n          }\r\n        }).then(({ data: res }) => {\r\n          if (res.code !== 0) {\r\n            return this.$message.error(res.msg)\r\n          }\r\n          if (!res.data.list || res.data.list.length <= 0) {\r\n            return this.$message.error(this.$t('process.notExistError'))\r\n          }\r\n          this.$http['post'](this.formUrl, this.rootObj[this.formName]).then(({ data: res }) => {\r\n            if (res.code !== 0) {\r\n              this.$message.error(res.msg)\r\n              if (this.callbacks.formSaveErrorCallback) {\r\n                this.callbacks.formSaveErrorCallback(res)\r\n              }\r\n            }\r\n            if (this.callbacks.formSaveSuccessCallback) {\r\n              this.callbacks.formSaveSuccessCallback(res)\r\n            }\r\n            if (!res.data.businessKey) {\r\n              return this.$message.error(this.$t('process.businessKeyError'))\r\n              // this.startProcess(this.dataForm.processDefinitionKey, null, this.rootObj[this.formName])\r\n            } else {\r\n              this.startProcess(this.dataForm.processDefinitionKey, res.data.businessKey, this.rootObj[this.formName])\r\n            }\r\n          }).catch(() => {})\r\n        }).catch(() => {})\r\n      })\r\n    },\r\n    // 启动流程\r\n    startProcess (processDefinitionKey, businessKey, formData) {\r\n      var data = {\r\n        processDefinitionKey: processDefinitionKey,\r\n        businessKey: businessKey,\r\n        variables: formData\r\n      }\r\n      this.$http['post']('/act/running/startOfBusinessKey', data).then(({ data: res }) => {\r\n        if (res.code !== 0) {\r\n          if (this.callbacks.startProcessErrorCallback) {\r\n            this.callbacks.startProcessErrorCallback(res.data)\r\n          }\r\n        }\r\n        this.$message({\r\n          message: this.$t('prompt.success'),\r\n          type: 'success',\r\n          duration: 500,\r\n          onClose: () => {\r\n            if (this.callbacks.startProcessSuccessCallback) {\r\n              this.callbacks.startProcessSuccessCallback(res.data)\r\n            }\r\n          }\r\n        })\r\n        if (this.instanceIdUrl) {\r\n          var params = qs.stringify({\r\n            processInstanceId: res.data.processInstanceId,\r\n            processDefinitionKey: processDefinitionKey,\r\n            businessKey: businessKey\r\n          })\r\n          this.$http['post'](this.instanceIdUrl + '?' + params).then(({ data: res }) => {})\r\n        }\r\n      }).catch(() => {})\r\n    }\r\n  }\r\n}\r\n</script>\r\n"]}]}