{"remainingRequest":"/Users/95h/95h-Projects/vue-renren后台管理系统模板/security-enterprise-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/95h/95h-Projects/vue-renren后台管理系统模板/security-enterprise-admin/src/components/ren-process-running/src/ren-task-handle.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/95h/95h-Projects/vue-renren后台管理系统模板/security-enterprise-admin/src/components/ren-process-running/src/ren-task-handle.vue","mtime":1569313608000},{"path":"/Users/95h/95h-Projects/vue-renren后台管理系统模板/security-enterprise-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/95h/95h-Projects/vue-renren后台管理系统模板/security-enterprise-admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/95h/95h-Projects/vue-renren后台管理系统模板/security-enterprise-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/95h/95h-Projects/vue-renren后台管理系统模板/security-enterprise-admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport debounce from 'lodash/debounce'\r\nimport qs from 'qs'\r\nexport default {\r\n  data () {\r\n    return {\r\n      visible: false,\r\n      handleType: '',\r\n      handleTitle: '',\r\n      dataForm: {\r\n        comment: '',\r\n        taskId: ''\r\n      },\r\n      // 回调函数\r\n      callbacks: {\r\n        taskHandleSuccessCallback: null,\r\n        taskHandleErrorCallback: null\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    dataRule () {\r\n      return {\r\n        comment: [\r\n          { required: true, message: this.$t('validate.required'), trigger: 'blur' }\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    init () {\r\n      this.visible = true\r\n      if (this.handleType === 'complete') {\r\n        this.handleTitle = this.$t('process.completeTask')\r\n      } else if (this.handleType === 'reject') {\r\n        this.handleTitle = this.$t('process.rejectTask')\r\n      } else if (this.handleType === 'termination') {\r\n        this.handleTitle = this.$t('process.terminationTask')\r\n      }\r\n      this.$nextTick(() => {\r\n        this.$refs['dataForm'].resetFields()\r\n      })\r\n    },\r\n    // 表单提交\r\n    dataFormSubmitHandle () {\r\n      if (this.handleType === 'complete') {\r\n        this.completeTask()\r\n      } else if (this.handleType === 'reject') {\r\n        this.rejectTask()\r\n      } else if (this.handleType === 'termination') {\r\n        this.terminationTask()\r\n      }\r\n    },\r\n    // 驳回\r\n    rejectTask: debounce(function () {\r\n      this.$refs['dataForm'].validate((valid) => {\r\n        if (!valid) {\r\n          return false\r\n        }\r\n        if (!this.dataForm.taskId) {\r\n          return false\r\n        }\r\n        var params = qs.stringify({\r\n          'taskId': this.dataForm.taskId,\r\n          'comment': this.dataForm.comment\r\n        })\r\n        this.$http['post']('/act/task/backToFirst?', params).then(({ data: res }) => {\r\n          if (res.code !== 0) {\r\n            this.$message.error(res.msg)\r\n            if (this.callbacks.taskHandleErrorCallback) {\r\n              this.callbacks.taskHandleErrorCallback(res)\r\n            }\r\n            return\r\n          }\r\n          this.$message({\r\n            message: this.$t('prompt.success'),\r\n            type: 'success',\r\n            duration: 500,\r\n            onClose: () => {\r\n              this.visible = false\r\n              if (this.callbacks.taskHandleSuccessCallback) {\r\n                this.callbacks.taskHandleSuccessCallback(res)\r\n              }\r\n            }\r\n          })\r\n        })\r\n      })\r\n    }, 1000, { 'leading': true, 'trailing': false }),\r\n    // 通过\r\n    completeTask: debounce(function () {\r\n      this.$refs['dataForm'].validate((valid) => {\r\n        if (!valid) {\r\n          return false\r\n        }\r\n        if (!this.dataForm.taskId) {\r\n          return false\r\n        }\r\n        var params = qs.stringify({\r\n          'taskId': this.dataForm.taskId,\r\n          'comment': this.dataForm.comment\r\n        })\r\n        this.$http.post('/act/task/complete?' + params).then(({ data: res }) => {\r\n          if (res.code !== 0) {\r\n            this.$message.error(res.msg)\r\n            if (this.callbacks.taskHandleErrorCallback) {\r\n              this.callbacks.taskHandleErrorCallback(res)\r\n            }\r\n            return\r\n          }\r\n          this.$message({\r\n            message: this.$t('prompt.success'),\r\n            type: 'success',\r\n            duration: 500,\r\n            onClose: () => {\r\n              this.visible = false\r\n              if (this.callbacks.taskHandleSuccessCallback) {\r\n                this.callbacks.taskHandleSuccessCallback(res)\r\n              }\r\n            }\r\n          })\r\n        }).catch(() => {})\r\n      })\r\n    }, 1000, { 'leading': true, 'trailing': false }),\r\n    // 终止\r\n    terminationTask: debounce(function () {\r\n      this.$refs['dataForm'].validate((valid) => {\r\n        if (!valid) {\r\n          return false\r\n        }\r\n        if (!this.dataForm.taskId) {\r\n          return false\r\n        }\r\n        var task = qs.stringify({\r\n          taskId: this.dataForm.taskId,\r\n          comment: this.dataForm.comment\r\n        })\r\n        this.$http['post']('/act/task/endProcess', task).then(({ data: res }) => {\r\n          if (res.code !== 0) {\r\n            this.$message.error(res.msg)\r\n            if (this.callbacks.taskHandleErrorCallback) {\r\n              this.callbacks.taskHandleErrorCallback(res)\r\n            }\r\n            return\r\n          }\r\n          this.$message({\r\n            message: this.$t('prompt.success'),\r\n            type: 'success',\r\n            duration: 500,\r\n            onClose: () => {\r\n              this.visible = false\r\n              if (this.callbacks.taskHandleSuccessCallback) {\r\n                this.callbacks.taskHandleSuccessCallback(res)\r\n              }\r\n            }\r\n          })\r\n        }).catch(() => {})\r\n      })\r\n    }, 1000, { 'leading': true, 'trailing': false })\r\n  }\r\n}\r\n",{"version":3,"sources":["ren-task-handle.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;AAefile":"ren-task-handle.vue","sourceRoot":"src/components/ren-process-running/src","sourcesContent":["<template>\r\n  <el-dialog :visible.sync=\"visible\" :title=\"handleTitle\" :close-on-click-modal=\"false\" :close-on-press-escape=\"false\">\r\n    <el-form :model=\"dataForm\" :rules=\"dataRule\" ref=\"dataForm\" @keyup.enter.native=\"dataFormSubmitHandle()\" :label-width=\"$i18n.locale === 'en-US' ? '120px' : '80px'\">\r\n      <el-form-item :label=\"$t('process.comment')\" prop=\"comment\">\r\n        <el-input type=\"textarea\" v-model=\"dataForm.comment\" :placeholder=\"$t('process.comment')\"></el-input>\r\n      </el-form-item>\r\n    </el-form>\r\n    <template slot=\"footer\">\r\n      <el-button @click=\"visible = false\">{{ $t('cancel') }}</el-button>\r\n      <el-button type=\"primary\" @click=\"dataFormSubmitHandle()\">{{ $t('confirm') }}</el-button>\r\n    </template>\r\n  </el-dialog>\r\n</template>\r\n\r\n<script>\r\nimport debounce from 'lodash/debounce'\r\nimport qs from 'qs'\r\nexport default {\r\n  data () {\r\n    return {\r\n      visible: false,\r\n      handleType: '',\r\n      handleTitle: '',\r\n      dataForm: {\r\n        comment: '',\r\n        taskId: ''\r\n      },\r\n      // 回调函数\r\n      callbacks: {\r\n        taskHandleSuccessCallback: null,\r\n        taskHandleErrorCallback: null\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    dataRule () {\r\n      return {\r\n        comment: [\r\n          { required: true, message: this.$t('validate.required'), trigger: 'blur' }\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    init () {\r\n      this.visible = true\r\n      if (this.handleType === 'complete') {\r\n        this.handleTitle = this.$t('process.completeTask')\r\n      } else if (this.handleType === 'reject') {\r\n        this.handleTitle = this.$t('process.rejectTask')\r\n      } else if (this.handleType === 'termination') {\r\n        this.handleTitle = this.$t('process.terminationTask')\r\n      }\r\n      this.$nextTick(() => {\r\n        this.$refs['dataForm'].resetFields()\r\n      })\r\n    },\r\n    // 表单提交\r\n    dataFormSubmitHandle () {\r\n      if (this.handleType === 'complete') {\r\n        this.completeTask()\r\n      } else if (this.handleType === 'reject') {\r\n        this.rejectTask()\r\n      } else if (this.handleType === 'termination') {\r\n        this.terminationTask()\r\n      }\r\n    },\r\n    // 驳回\r\n    rejectTask: debounce(function () {\r\n      this.$refs['dataForm'].validate((valid) => {\r\n        if (!valid) {\r\n          return false\r\n        }\r\n        if (!this.dataForm.taskId) {\r\n          return false\r\n        }\r\n        var params = qs.stringify({\r\n          'taskId': this.dataForm.taskId,\r\n          'comment': this.dataForm.comment\r\n        })\r\n        this.$http['post']('/act/task/backToFirst?', params).then(({ data: res }) => {\r\n          if (res.code !== 0) {\r\n            this.$message.error(res.msg)\r\n            if (this.callbacks.taskHandleErrorCallback) {\r\n              this.callbacks.taskHandleErrorCallback(res)\r\n            }\r\n            return\r\n          }\r\n          this.$message({\r\n            message: this.$t('prompt.success'),\r\n            type: 'success',\r\n            duration: 500,\r\n            onClose: () => {\r\n              this.visible = false\r\n              if (this.callbacks.taskHandleSuccessCallback) {\r\n                this.callbacks.taskHandleSuccessCallback(res)\r\n              }\r\n            }\r\n          })\r\n        })\r\n      })\r\n    }, 1000, { 'leading': true, 'trailing': false }),\r\n    // 通过\r\n    completeTask: debounce(function () {\r\n      this.$refs['dataForm'].validate((valid) => {\r\n        if (!valid) {\r\n          return false\r\n        }\r\n        if (!this.dataForm.taskId) {\r\n          return false\r\n        }\r\n        var params = qs.stringify({\r\n          'taskId': this.dataForm.taskId,\r\n          'comment': this.dataForm.comment\r\n        })\r\n        this.$http.post('/act/task/complete?' + params).then(({ data: res }) => {\r\n          if (res.code !== 0) {\r\n            this.$message.error(res.msg)\r\n            if (this.callbacks.taskHandleErrorCallback) {\r\n              this.callbacks.taskHandleErrorCallback(res)\r\n            }\r\n            return\r\n          }\r\n          this.$message({\r\n            message: this.$t('prompt.success'),\r\n            type: 'success',\r\n            duration: 500,\r\n            onClose: () => {\r\n              this.visible = false\r\n              if (this.callbacks.taskHandleSuccessCallback) {\r\n                this.callbacks.taskHandleSuccessCallback(res)\r\n              }\r\n            }\r\n          })\r\n        }).catch(() => {})\r\n      })\r\n    }, 1000, { 'leading': true, 'trailing': false }),\r\n    // 终止\r\n    terminationTask: debounce(function () {\r\n      this.$refs['dataForm'].validate((valid) => {\r\n        if (!valid) {\r\n          return false\r\n        }\r\n        if (!this.dataForm.taskId) {\r\n          return false\r\n        }\r\n        var task = qs.stringify({\r\n          taskId: this.dataForm.taskId,\r\n          comment: this.dataForm.comment\r\n        })\r\n        this.$http['post']('/act/task/endProcess', task).then(({ data: res }) => {\r\n          if (res.code !== 0) {\r\n            this.$message.error(res.msg)\r\n            if (this.callbacks.taskHandleErrorCallback) {\r\n              this.callbacks.taskHandleErrorCallback(res)\r\n            }\r\n            return\r\n          }\r\n          this.$message({\r\n            message: this.$t('prompt.success'),\r\n            type: 'success',\r\n            duration: 500,\r\n            onClose: () => {\r\n              this.visible = false\r\n              if (this.callbacks.taskHandleSuccessCallback) {\r\n                this.callbacks.taskHandleSuccessCallback(res)\r\n              }\r\n            }\r\n          })\r\n        }).catch(() => {})\r\n      })\r\n    }, 1000, { 'leading': true, 'trailing': false })\r\n  }\r\n}\r\n</script>\r\n"]}]}